{"version":3,"sources":["components/base.ts","components/checkbox/Checkbox.tsx","components/dynamic-line-chart/DynamicLineChart.tsx","services/data-generator.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Flex","FlexColumn","LegendWrapper","LegendItem","label","ChartWrapper","Layout","Chart","Wrapper","Legend","Item","CheckboxContainer","Icon","svg","HiddenCheckbox","input","attrs","type","StyledCheckbox","props","checked","Checkbox","className","others","viewBox","points","defaultChartOptions","width","height","formatDate","unixTime","Date","toLocaleTimeString","DynamicLineChart","data","config","ResponsiveContainer","LineChart","XAxis","dataKey","domain","tickFormatter","scale","YAxis","verticalAlign","Object","values","map","chart","name","color","Line","dot","stroke","strokeWidth","API_URL","CHARTS","fetchChartData","size","fetch","then","resp","json","App","useState","chartConfig","setChartConfig","setData","selected","setSelected","useEffect","a","Promise","resolve","charts","fromEntries","getChartsConfig","length","updateChart","intervalId","setInterval","clearInterval","chunk","getChartData","chartData","fetchData","useCallback","count","composeData","datasets","nextData","Array","fill","_","index","timestamp","now","reduce","res","prevData","toggleChart","e","target","isSelected","prevState","dataset","item","keys","key","onChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2579f4d0.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Container = styled.div`\n    align-items: center;\n    display: flex;\n    height: 100vh;\n    justify-content: center;\n    padding: 20px;\n`\n\nconst Flex = styled.div`\n    display: flex;\n`;\n\nconst FlexColumn = styled(Flex)`\n    flex-direction: column;\n`;\n\nconst LegendWrapper = styled(FlexColumn)`\n   min-width: 250px;\n`;\n\nconst LegendItem = styled.label`\n    align-items: center;\n    display: flex;\n    justify-content: center;\n    margin-left: 40px;\n`;\n\nconst ChartWrapper = styled(Flex)`\n    flex: 1;\n    height: 300px;\n`\n\nexport const Layout = {\n    Container,\n    Flex,\n    FlexColumn\n};\n\nexport const Chart = {\n    Wrapper: ChartWrapper\n}\n\nexport const Legend = {\n    Wrapper: LegendWrapper,\n    Item: LegendItem\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst CheckboxContainer = styled.div`\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  margin: 4px;\n`\n\nconst Icon = styled.svg`\n  fill: none;\n  stroke: white;\n  stroke-width: 2px;\n`\n\nconst HiddenCheckbox = styled.input.attrs({ type: 'checkbox' })`\n  border: 0;\n  clip: rect(0 0 0 0);\n  clippath: inset(50%);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`\n\nconst StyledCheckbox = styled.div<{ checked: boolean }>`\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  background: ${(props) => (props.checked ? '#2196f3' : '#fff')};\n  border: 1px solid #2196f3;\n  border-radius: 3px;\n  margin-right: 4px;\n  transition: all 150ms;\n\n  ${HiddenCheckbox}:focus + & {\n    box-shadow: 0 0 0 3px #90caf9;\n  }\n\n  ${Icon} {\n    visibility: ${(props) => (props.checked ? 'visible' : 'hidden')}\n  }\n`\n\nconst Checkbox = (props: any) => {\n    const { className, checked, label, ...others } = props;\n\n    return (\n        <CheckboxContainer className={className}>\n            <HiddenCheckbox checked={checked} {...others} />\n            <StyledCheckbox checked={checked}>\n                <Icon viewBox=\"0 0 24 24\">\n                    <polyline points=\"20 6 9 17 4 12\" />\n                </Icon>\n            </StyledCheckbox>\n        </CheckboxContainer>\n    )\n};\n\nexport default Checkbox;\n","import React from 'react';\nimport { LineChart, Legend, Line, ResponsiveContainer, XAxis, YAxis } from 'recharts';\n\nimport { Chart, ChartDataset } from '../../models';\n\ninterface DynamicLineChartProps {\n    config: Chart[];\n    data: Array<ChartDataset>;\n}\n\nconst defaultChartOptions = {\n    width: '100%',\n    height: '100%'\n};\n\nconst formatDate = (unixTime: number) => new Date(unixTime).toLocaleTimeString();\n\nconst DynamicLineChart = (props: DynamicLineChartProps) => {\n    const { data, config } = props;\n\n    return (\n        <ResponsiveContainer {...defaultChartOptions}>\n            <LineChart data={data}>\n                <XAxis\n                    dataKey=\"timestamp\"\n                    domain={['auto', 'auto']}\n                    tickFormatter={formatDate}\n                    scale=\"time\"\n                    type=\"number\" />\n                <YAxis />\n                <Legend verticalAlign=\"top\" />\n\n                {Object.values(config).map(chart => {\n                    const { name, color } = chart;\n\n                    return (\n                        <Line\n                            key={name}\n                            type=\"monotone\"\n                            dataKey={name}\n                            dot={false}\n                            stroke={color}\n                            strokeWidth={2}\n                        />\n                    );\n                })}\n\n            </LineChart>\n        </ResponsiveContainer>\n    );\n};\n\nexport default DynamicLineChart;\n","import { Chart } from '../models';\n\nconst API_URL = 'https://qrng.anu.edu.au/API/jsonI.php?type=uint8';\n\nconst CHARTS: Array<Chart> = [\n    { name: 'Dataset 1', color: '#009688', values: [10, 100] },\n    { name: 'Dataset 2', color: '#2196f3', values: [0, 10] },\n    { name: 'Dataset 3', color: '#8a4af3', values: [50, 100] }\n]\n\nexport const DEFAULT_SIZE = 10;\nexport const CHUNK_SIZE = 1;\nexport const UPDATE_FREQUENCY = 3 * 1000;\n\nexport const getCharts = () => {\n    return Promise.resolve(CHARTS);\n};\n\nexport const fetchChartData = (size = DEFAULT_SIZE) => {\n    return fetch(`${API_URL}&length=${size}`).then(resp => resp.json());\n}\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport { Layout, Legend, Chart, Checkbox, DynamicLineChart } from './components';\nimport { Chart as ChartConfig, ChartDataset } from './models';\nimport { getCharts, fetchChartData, DEFAULT_SIZE, CHUNK_SIZE, UPDATE_FREQUENCY } from './services';\nimport './App.css';\n\nfunction App() {\n    const [chartConfig, setChartConfig] = useState<ChartConfig[]>([]);\n    const [data, setData] = useState<ChartDataset[]>([]);\n    const [selected, setSelected] = useState<{ [name: string]: boolean }>({});\n\n    useEffect(() => {\n        const getChartsConfig = async () => {\n            const charts: ChartConfig[] = await getCharts();\n            const config = charts.map(({ name }) => ([name, true]));\n\n            setSelected(Object.fromEntries(config));\n            setChartConfig(charts);\n        };\n\n        getChartsConfig();\n    }, []);\n\n    useEffect(() => {\n        if (chartConfig.length) {\n            updateChart();\n        }\n    }, [chartConfig]);\n\n    useEffect(() => {\n        const intervalId = setInterval(() => updateChart(true), UPDATE_FREQUENCY);\n\n        return () => {\n            intervalId && clearInterval(intervalId);\n        };\n    }, [data, selected]);\n\n    const updateChart = async (chunk = false) => {\n        const chartData = await getChartData(chunk);\n\n        setData(chartData);\n    };\n\n    const fetchData = useCallback(async (count?: number) => {\n        const { data } = await fetchChartData(count);\n\n        return data;\n    }, []);\n\n    const composeData = useCallback((count: number, config: ChartConfig[], datasets: ChartDataset[]) => {\n        const nextData = new Array(count).fill({}).map((_, index) => {\n            return ({\n                timestamp: Date.now() + index * UPDATE_FREQUENCY / count,\n                ...config.reduce((res, { name }, chart) => ({\n                    ...res,\n                    [name]: selected[name] ? datasets[chart * count + index] : null\n                }), {})\n            });\n        });\n\n        const [_, ...prevData] = data;\n\n        return [...prevData, ...nextData];\n    }, [data, selected]);\n\n    const getChartData = useCallback(async (chunk = false) => {\n        const count = chunk ? CHUNK_SIZE : DEFAULT_SIZE;\n        const datasets = await fetchData(count * chartConfig.length);\n\n        return composeData(count, chartConfig, datasets || []);\n    }, [chartConfig, data]);\n\n    const toggleChart = useCallback(async (e: any) => {\n        const name = e.target.name;\n        const isSelected =  e.target.checked;\n\n        setSelected((prevState: any) => ({\n            ...prevState,\n            [name]: isSelected\n        }));\n\n        if (isSelected) {\n            const dataset = await fetchData(DEFAULT_SIZE);\n\n            setData(prevData => prevData.map((item, index) => ({\n                ...item,\n                [name]: dataset[index]\n            })));\n        } else {\n            setData(prevData => prevData.map(item => ({ ...item, [name]: null })));\n        }\n    }, []);\n\n    return (\n        <Layout.Container className=\"App\">\n            <Chart.Wrapper>\n                <DynamicLineChart config={chartConfig} data={data} />\n            </Chart.Wrapper>\n\n            <Legend.Wrapper>\n                {Object.keys(selected).map((key) => {\n                    const isSelected = selected[key];\n\n                    return (\n                        <Legend.Item key={key}>\n                            <Checkbox name={key} checked={isSelected} onChange={toggleChart}/>\n                            <span>{key}</span>\n                        </Legend.Item>\n                    );\n                })}\n            </Legend.Wrapper>\n        </Layout.Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}